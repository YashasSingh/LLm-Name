{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":10282321,"sourceType":"datasetVersion","datasetId":6363011},{"sourceId":10282364,"sourceType":"datasetVersion","datasetId":6363041}],"dockerImageVersionId":30823,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/pharaohcheckers/notebooka3d641b33b?scriptVersionId=214530905\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"*This is My AsdvAFCdxfc b xc xcvbxzfcvxzfgasdxfawsdasqwwdvcx cx        n b nlmn *****","metadata":{}},{"cell_type":"code","source":"import os\nfrom collections import defaultdict\n\n# Directory containing the text files\ndirectory = \"./names\"  # Change to the folder where your yob files are located\n\n# Dictionary to store aggregated data\nname_data = defaultdict(lambda: {\"M\": 0, \"F\": 0})\n\n# Process files from yob1880 to yob2023\nfor year in range(1880, 2024):\n    filename = f\"yob{year}.txt\"\n    filepath = os.path.join(directory, filename)\n\n    if os.path.exists(filepath):  # Check if the file exists\n        with open(filepath, \"r\") as file:\n            for line in file:\n                entry = line.strip().split(\",\")  # Split into [Name, Gender, Count]\n                if len(entry) == 3:\n                    name, gender, count = entry[0], entry[1], int(entry[2])\n                    name_data[name][gender] += count  # Aggregate the count\n\n# Sort the names alphabetically\nsorted_names = sorted(name_data.keys())\n\n# Save the aggregated data to a new file\noutput_file = \"combined_filtered_aggregated_names.txt\"\nwith open(output_file, \"w\") as file:\n    for name in sorted_names:\n        for gender, count in name_data[name].items():\n            if count > 0:  # Only include entries with a non-zero count\n                file.write(f\"{name},{gender},{count}\\n\")\n\nprint(f\"Aggregated names saved to '{output_file}'.\")\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-24T04:04:33.427346Z","iopub.execute_input":"2024-12-24T04:04:33.427622Z","iopub.status.idle":"2024-12-24T04:04:33.435578Z","shell.execute_reply.started":"2024-12-24T04:04:33.427602Z","shell.execute_reply":"2024-12-24T04:04:33.434699Z"}},"outputs":[{"name":"stdout","text":"Aggregated names saved to 'combined_filtered_aggregated_names.txt'.\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import random\nfrom collections import defaultdict\n\n# Load the aggregated dataset\ninput_file = \"/kaggle/input/name-totatl/combined_filtered_aggregated_names.txt\"\n\n# Markov model storage: separate chains for each gender\nmarkov_model = {\n    \"M\": defaultdict(lambda: defaultdict(int)),\n    \"F\": defaultdict(lambda: defaultdict(int))\n}\ntotal_counts = {\"M\": 0, \"F\": 0}  # Track total counts for weighted randomness\n\n\n# Build the Markov Chain model\ndef build_markov_model():\n    with open(input_file, \"r\") as file:\n        for line in file:\n            name, gender, count = line.strip().split(\",\")\n            count = int(count)\n\n            # Update total count for weighting\n            total_counts[gender] += count\n\n            # Add to the Markov model: pair each character with the next\n            padded_name = f\"_{name}_\"\n            for i in range(len(padded_name) - 1):\n                current_char = padded_name[i]\n                next_char = padded_name[i + 1]\n                markov_model[gender][current_char][next_char] += count\n\n\n# Generate a name using the Markov Chain\ndef generate_name(gender=\"M\"):\n    if gender not in markov_model:\n        raise ValueError(\"Invalid gender. Use 'M' or 'F'.\")\n\n    name = \"_\"\n    while True:\n        # Get the last character in the name\n        last_char = name[-1]\n\n        # Choose the next character based on weighted probabilities\n        next_char_candidates = markov_model[gender][last_char]\n        if not next_char_candidates:\n            break\n\n        # Weighted choice for the next character\n        total_weight = sum(next_char_candidates.values())\n        rand_choice = random.uniform(0, total_weight)\n        cumulative_weight = 0\n        for char, weight in next_char_candidates.items():\n            cumulative_weight += weight\n            if rand_choice <= cumulative_weight:\n                name += char\n                break\n\n        # Stop if we reach the end marker \"_\"\n        if name[-1] == \"_\":\n            break\n\n    # Return the name without the padding markers\n    return name.strip(\"_\")\n\n\n# Generate multiple names\ndef generate_names(count=10, gender=\"M\"):\n    if gender not in total_counts:\n        raise ValueError(\"Invalid gender. Use 'M' or 'F'.\")\n    return [generate_name(gender) for _ in range(count)]\n\n\n# Main execution\nif __name__ == \"__main__\":\n    print(\"Building the Markov model...\")\n    build_markov_model()\n    print(\"Markov model built successfully!\")\n\n    print(\"\\nGenerating names:\")\n    print(\"Male names:\")\n    print(generate_names(count=5, gender=\"M\"))\n\n    print(\"\\nFemale names:\")\n    print(generate_names(count=5, gender=\"F\"))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-24T04:04:33.436861Z","iopub.execute_input":"2024-12-24T04:04:33.437301Z","iopub.status.idle":"2024-12-24T04:04:33.749448Z","shell.execute_reply.started":"2024-12-24T04:04:33.437277Z","shell.execute_reply":"2024-12-24T04:04:33.74857Z"}},"outputs":[{"name":"stdout","text":"Building the Markov model...\nMarkov model built successfully!\n\nGenerating names:\nMale names:\n['Ed', 'Stennertey', 'Phestastiases', 'Manjar', 'Johich']\n\nFemale names:\n['Anisth', 'Satolynnelldildiealonnearahy', 'Manchy', 'Erana', 'Dara']\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"import random\nfrom collections import defaultdict\nfrom concurrent.futures import ThreadPoolExecutor\n\n# Load the aggregated dataset\ninput_file = \"/kaggle/input/name-totatl/combined_filtered_aggregated_names.txt\"\n\n# Markov model storage\nmarkov_model = {\n    \"M\": {},\n    \"F\": {}\n}\ntotal_counts = {\"M\": 0, \"F\": 0}  # Track total counts for weighting\nname_frequencies = {\"M\": [], \"F\": []}  # Store names and their total counts for ranking\n\n\n# Build the Markov Chain model\ndef build_markov_model(order=2, top_percentile=100):\n    with open(input_file, \"r\") as file:\n        for line in file:\n            name, gender, count = line.strip().split(\",\")\n            count = int(count)\n\n            # Update total count for weighting\n            total_counts[gender] += count\n            name_frequencies[gender].append((name, count))\n\n            # Add to the Markov model\n            if gender not in markov_model:\n                markov_model[gender] = {}\n\n            padded_name = f\"{'_' * order}{name}{'_' * order}\"\n            for i in range(len(padded_name) - order):\n                current_state = padded_name[i:i + order]\n                next_char = padded_name[i + order]\n                if current_state not in markov_model[gender]:\n                    markov_model[gender][current_state] = {}\n                markov_model[gender][current_state][next_char] = (\n                    markov_model[gender][current_state].get(next_char, 0) + count\n                )\n\n    # Sort names by frequency for percentile filtering\n    for gender in name_frequencies:\n        name_frequencies[gender].sort(key=lambda x: -x[1])  # Sort by count descending\n        if top_percentile < 100:\n            top_count = int(len(name_frequencies[gender]) * (top_percentile / 100))\n            name_frequencies[gender] = name_frequencies[gender][:top_count]\n\n    # Precompute cumulative weights for faster name generation\n    for gender in markov_model:\n        for current_state, next_chars in markov_model[gender].items():\n            cumulative = []\n            total_weight = 0\n            for char, weight in next_chars.items():\n                total_weight += weight\n                cumulative.append((char, total_weight))\n            markov_model[gender][current_state] = (cumulative, total_weight)\n\n\n# Generate a single name using the Markov Chain\ndef generate_name(gender=\"M\", min_length=3, max_length=10, order=2):\n    if gender not in markov_model:\n        raise ValueError(\"Invalid gender. Use 'M' or 'F'.\")\n\n    name = \"_\" * order\n    while True:\n        current_state = name[-order:]\n        if current_state not in markov_model[gender]:\n            break\n\n        cumulative, total_weight = markov_model[gender][current_state]\n        rand_choice = random.uniform(0, total_weight)\n        for char, weight in cumulative:\n            if rand_choice <= weight:\n                name += char\n                break\n\n        if name[-1] == \"_\":  # Stop at end marker\n            break\n\n    # Return the name if it meets length constraints\n    final_name = name.strip(\"_\")\n    if min_length <= len(final_name) <= max_length:\n        return final_name\n    return generate_name(gender, min_length, max_length, order)  # Retry\n\n\n# Generate multiple names in parallel\ndef generate_names(count=10, gender=\"M\", min_length=3, max_length=10, order=2, threads=4):\n    with ThreadPoolExecutor(max_workers=threads) as executor:\n        futures = [\n            executor.submit(generate_name, gender, min_length, max_length, order)\n            for _ in range(count)\n        ]\n        return [future.result() for future in futures]\n\n\n# Main execution\nif __name__ == \"__main__\":\n    print(\"Building the Markov model...\")\n    build_markov_model(order=2, top_percentile=2)  # Filter to top 50% names\n    print(\"Markov model built successfully!\")\n\n    print(\"\\nGenerating names:\")\n    print(\"Male names (length 4-8):\")\n    print(generate_names(count=5, gender=\"M\", min_length=4, max_length=8, threads=4))\n\n    print(\"\\nFemale names (length 5-10):\")\n    print(generate_names(count=5, gender=\"F\", min_length=5, max_length=10, threads=4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-24T04:04:33.751063Z","iopub.execute_input":"2024-12-24T04:04:33.751415Z","iopub.status.idle":"2024-12-24T04:04:34.406472Z","shell.execute_reply.started":"2024-12-24T04:04:33.751382Z","shell.execute_reply":"2024-12-24T04:04:34.405493Z"}},"outputs":[{"name":"stdout","text":"Building the Markov model...\nMarkov model built successfully!\n\nGenerating names:\nMale names (length 4-8):\n['Luin', 'Ibrichi', 'Luin', 'Frard', 'Wald']\n\nFemale names (length 5-10):\n['Laurthawn', 'Chley', 'Joyce', 'Jeaden', 'Katherla']\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"import random\nfrom collections import defaultdict\nfrom concurrent.futures import ThreadPoolExecutor\n\n# Input file\ninput_file = \"/kaggle/input/name-totatl/combined_filtered_aggregated_names.txt\"\n\n# Markov model\nmarkov_model = {\n    \"M\": {},\n    \"F\": {}\n}\ntotal_counts = {\"M\": 0, \"F\": 0}\n\n# Build the Markov Chain model\ndef build_markov_model(order=3, top_percentile=95):\n    with open(input_file, \"r\") as file:\n        for line in file:\n            name, gender, count = line.strip().split(\",\")\n            count = int(count)\n\n            total_counts[gender] += count\n\n            # Add to Markov model\n            padded_name = f\"{'_' * order}{name}{'_' * order}\"\n            for i in range(len(padded_name) - order):\n                current_state = padded_name[i:i + order]\n                next_char = padded_name[i + order]\n                if current_state not in markov_model[gender]:\n                    markov_model[gender][current_state] = {}\n                markov_model[gender][current_state][next_char] = (\n                    markov_model[gender][current_state].get(next_char, 0) + count\n                )\n\n    # Precompute cumulative weights\n    for gender in markov_model:\n        for current_state, next_chars in markov_model[gender].items():\n            cumulative = []\n            total_weight = 0\n            for char, weight in next_chars.items():\n                total_weight += weight\n                cumulative.append((char, total_weight))\n            markov_model[gender][current_state] = (cumulative, total_weight)\n\n# Generate a single name\ndef generate_name(gender=\"M\", min_length=4, max_length=12, order=3, bias_factor=1.2, prefix=None):\n    if gender not in markov_model or not markov_model[gender]:\n        raise ValueError(\"Markov model is empty or invalid for the given gender.\")\n\n    retries = 100\n    for attempt in range(retries):\n        name = (\"_\" * order + prefix) if prefix else (\"_\" * order)\n\n        while True:\n            current_state = name[-order:]\n            if current_state not in markov_model[gender]:\n                break\n\n            cumulative, total_weight = markov_model[gender][current_state]\n\n            rand_choice = random.uniform(0, total_weight)\n            cumulative_weight = 0\n            for char, weight in cumulative:\n                cumulative_weight += weight\n                if rand_choice <= cumulative_weight:\n                    name += char\n                    break\n\n            if name[-1] == \"_\":\n                break\n\n        final_name = name.strip(\"_\")\n        if min_length <= len(final_name) <= max_length:\n            return final_name\n\n    raise ValueError(\"Failed to generate a valid name within retries.\")\n\n# Generate multiple names\ndef generate_names(count=10, gender=\"M\", min_length=4, max_length=12, order=3, bias_factor=1.2, prefix=None, threads=4):\n    def generate():\n        return generate_name(gender, min_length, max_length, order, bias_factor, prefix)\n\n    with ThreadPoolExecutor(max_workers=threads) as executor:\n        return list(executor.map(lambda _: generate(), range(count)))\n\n# Main execution\nif __name__ == \"__main__\":\n    print(\"Building the Markov model...\")\n    build_markov_model(order=3, top_percentile=95)\n    print(\"Markov model built successfully!\")\n\n    print(\"\\nGenerating names:\")\n    print(\"Male names with prefix 'Jo':\")\n    print(generate_names(count=10, gender=\"M\", min_length=4, max_length=12, prefix=\"Hi\"))\n\n    print(\"\\nFemale names:\")\n    print(generate_names(count=10, gender=\"F\", min_length=4, max_length=12, prefix=\"Ya\"))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-24T04:06:39.861126Z","iopub.execute_input":"2024-12-24T04:06:39.86148Z","iopub.status.idle":"2024-12-24T04:06:40.637882Z","shell.execute_reply.started":"2024-12-24T04:06:39.861454Z","shell.execute_reply":"2024-12-24T04:06:40.636933Z"}},"outputs":[{"name":"stdout","text":"Building the Markov model...\nMarkov model built successfully!\n\nGenerating names:\nMale names with prefix 'Jo':\n['Hild', 'Hiden', 'Hien', 'Hiawayne', 'Hilbert', 'Hilbert', 'Hilburge', 'Hier', 'Hijid', 'Hilder']\n\nFemale names:\n['Yakiyah', 'Yadison', 'Yaelaina', 'Yahan', 'Yaimi', 'Yaffanika', 'Yagmari', 'Yakiraine', 'Yaela', 'Yaffanyla']\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}